
/* The FFC from the CPU to the control board has this pinout: */
/* | Pin | Purpose | */
/* |-----|---------| */
/* | 1   | Piezo buzzer | */
/* | 2   | 1.8V supply | */
/* | 3   | GND | */
/* | 4   | 3.3V supply | */
/* | 5   | Shift register clock / Data 2 | */
/* | 6   | CPU to shift register / Data 0 |  */
/* | 7   | Video clock (~6MHz) | */
/* | 8   | Command (active low) | */
/* | 9   | Data 1 | */
/* | 10  | ON button | */
/* | 11  | Shift/load | */
/* | 12  | SR Output enable | */
/* | 13  | Shift register to CPU | */
/* | 14  | GND | */

// D0, D1, D2 should be contiguous OUT on PIO
// Command, Video clock should be contiguous SET on PIO

.define VP_CMD  0
.define VP_CLK  1
.define VP_DAT0 2
.define VP_DAT1 3
.define VP_DAT2 4

// OUT pins: start 2, size 3 (data)
// side-set pins: start 1, size 1 (clock)
// We're aiming for 6MHz clock, so a 24MHz PIO speed. Divider target is about 5.2.
// I'll start out closer to 10, to make sure we can operate at a slower speed first.
.program vid_send

.side_set 1

.wrap_target
SET PINS, 1      side 0 [8]
OUT PINS, 3      side 0 [4]
NOP              side 1 [4]
.wrap

// OUT pins: start 2, size 1 (data)
// side-set pins: start 1, size 1 (clock)
// SET pins: start 0, size 1 (cmd)
.program command_send

.side_set 1

.wrap_target
PULL BLOCK       side 0
SET PINS, 0      side 0 [8]
loop:
OUT PINS, 1      side 0 [4]
NOP              side 1 [4]
JMP !OSRE loop   side 0 [4]
SET PINS, 1      side 0 [4]
.wrap

% c-sdk {
static inline void pio_vid_init_pins(PIO pio) {
  for (uint i = VP_CMD; i <= VP_DAT2; i++) {
    pio_gpio_init(pio, i);
  }
}

static inline void pio_vid_init_data(PIO pio, uint sm, uint offset) {
  // data send
  pio_sm_config conf = vid_send_program_get_default_config(offset);
  sm_config_set_set_pins(&conf, 0, 1);
  sm_config_set_out_pins(&conf, 2, 3);
  sm_config_set_out_shift(&conf, false, true, 24);
  sm_config_set_sideset_pins(&conf, 1);
  sm_config_set_clkdiv(&conf, 2.0);
  pio_sm_set_pindirs_with_mask(pio, sm, 0x1f, 0x1f);
  pio_sm_init(pio, sm, offset, &conf);
  pio_sm_set_enabled(pio, sm, true);
}

static inline void pio_vid_init_cmd(PIO pio, uint sm, uint offset) {
  // command_send
  pio_sm_config conf = command_send_program_get_default_config(offset);
  sm_config_set_set_pins(&conf, 0, 1);
  sm_config_set_out_pins(&conf, 2, 1);
  sm_config_set_out_shift(&conf, false, false, 24);
  sm_config_set_sideset_pins(&conf, 8);
  sm_config_set_clkdiv(&conf, 10.0);
  pio_sm_set_pindirs_with_mask(pio, sm, 0x1f, 0x1f);
  pio_sm_init(pio, sm, offset, &conf);
  pio_sm_set_enabled(pio, sm, true);
}

%}
